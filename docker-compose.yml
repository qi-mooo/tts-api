# TTS API Docker Compose 配置
# 
# 使用方法：
# 1. 生产环境（使用 GitHub Packages 镜像）：
#    docker-compose up -d
# 
# 2. 开发环境（本地构建）：
#    TTS_IMAGE= docker-compose up -d --build
#
# 3. 配置环境变量：
#    复制 .env.template 为 .env 并修改配置

version: '3.8'

services:
  tts-api:
    # 使用环境变量选择镜像源：开发环境构建本地镜像，生产环境使用 GitHub Packages
    image: ${TTS_IMAGE:-ghcr.io/qi-mooo/tts-api:latest}
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "${TTS_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - TTS_LOG_LEVEL=${TTS_LOG_LEVEL:-INFO}
      - TTS_ADMIN_USERNAME=${TTS_ADMIN_USERNAME:-admin}
      - TTS_ADMIN_PASSWORD=${TTS_ADMIN_PASSWORD:-admin123}
      - TTS_NARRATION_VOICE=${TTS_NARRATION_VOICE:-zh-CN-YunjianNeural}
      - TTS_DIALOGUE_VOICE=${TTS_DIALOGUE_VOICE:-zh-CN-XiaoyiNeural}
      - TTS_DEFAULT_SPEED=${TTS_DEFAULT_SPEED:-1.2}
      - TTS_DATABASE_PATH=${TTS_DATABASE_PATH:-/app/data/tts_api.db}
      - TTS_DATABASE_CLEANUP_DAYS=${TTS_DATABASE_CLEANUP_DAYS:-30}
      - TTS_ENABLE_REQUEST_LOGGING=${TTS_ENABLE_REQUEST_LOGGING:-true}
      - TTS_ENABLE_METRICS=${TTS_ENABLE_METRICS:-true}
    volumes:
      # 生产环境只挂载必要的目录
      - ./logs:/app/logs
      - tts_audio_cache:/app/audio_cache
      - tts_database:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 可选：添加 Redis 用于缓存（如果需要）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - with-redis

  # 可选：添加 Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - tts-api
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  redis_data:
  tts_audio_cache:
  tts_database:

networks:
  default:
    name: tts-network